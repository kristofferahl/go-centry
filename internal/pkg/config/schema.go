// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/manifest.json (2.097kB)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xdd\xae\xd3\x30\x0c\xc7\xef\xf7\x14\x51\xe0\xb2\x67\x15\xb7\xbb\xe5\x0a\x09\x89\x07\x40\x13\xca\x5a\xb7\xf5\xa1\xb1\x8b\x93\x8e\x33\x1d\xed\xdd\x51\xd2\x6c\x94\xae\x85\xd1\x49\x70\xd5\xcd\xf1\xcf\xf1\xc7\xdf\xed\xeb\x46\x29\xfd\xd6\x15\x0d\x58\xa3\x77\x4a\x37\xde\x77\xbb\x3c\x7f\x76\x4c\x4f\x83\x75\xcb\x52\xe7\xc3\xcf\x37\x3a\x8b\xee\x58\x5e\x5c\xdd\x2e\xcf\x6b\xf4\x4d\x7f\xd8\x16\x6c\xf3\xaf\x82\xce\x73\x55\x81\x98\xa6\xcd\x6b\x7e\x2a\x80\xbc\x9c\x12\xee\x72\x6b\x08\x2b\x70\x7e\x1b\xe2\xeb\x6c\x13\xa2\xf9\x53\x07\x21\x1c\x1f\x9e\xa1\xf0\xc3\x0d\x9d\x70\x07\xe2\x11\x9c\xde\xa9\x90\xa2\x52\xda\x15\x82\x9d\xff\x69\x18\xa1\x46\xc4\x9c\x22\x19\xcd\xe8\xc1\x8e\xfd\x46\x9e\xce\x0b\x52\xad\xd3\xc1\x39\x3e\xcf\x03\xa8\x0b\xb6\xd6\x50\xf9\xe0\x0d\xa3\x32\xd2\xc9\x4c\x31\xe9\x84\x8c\x0d\xcc\xeb\x4d\x7e\x99\xd2\x16\xe9\x23\x50\xed\x1b\xbd\x53\xef\x2e\x39\x5e\x22\x9a\x68\xfe\x6b\xae\x81\xb6\x5b\xc3\x95\x30\x34\x1f\x99\xd6\xe0\x86\x88\xbd\x09\xb4\xfb\x15\x4f\xbd\x9a\x66\x89\x65\x09\x93\x8b\x0e\xcc\x2d\x18\xd2\x69\x64\xa3\xb1\x45\x44\xe0\x5b\x8f\x02\x41\x96\x9f\x53\x5b\xb3\xd4\x26\xb5\x9f\x1d\x36\x77\xd7\x7c\xfe\xcd\xac\x13\x33\xdb\x3c\xa0\xde\x86\xd4\x47\xa6\x50\x70\x78\x3a\x68\xc3\x15\xfb\x49\x8f\xd6\x2a\xc7\x35\x2c\xfe\x2e\x30\xfc\x37\x2f\x8b\x81\x80\x8e\x5f\xd6\x26\xf1\xa0\x9c\x4a\xa8\x4c\xdf\xde\x57\xc5\x7f\x56\x62\x84\xb2\x34\xae\x05\x25\x16\x4c\x15\xd6\x73\x42\x9c\xc8\x6b\x49\x5c\xeb\xc4\xf0\xd0\x14\xf4\x11\xc4\xad\x02\x5b\xae\x17\x36\xe3\x76\x9b\x7e\xb7\x4f\x21\x14\x1c\xa1\xfd\xe3\x4a\x95\x70\xe8\xa3\x05\xa9\xe2\xf0\xfc\x6e\x84\xa2\x87\x08\xcb\xf0\x9a\x20\x2c\xa6\x1b\x16\xef\x86\x0a\x5f\xee\x2c\x71\x84\xce\x0b\xa3\xc1\x12\x3e\x90\x07\x21\xd3\xbe\x1f\x7d\x69\xe6\x94\xb5\x80\x7d\xea\x66\x94\x7b\xa3\xc7\x2b\xbd\xf0\x56\xbc\x8c\x2e\xc9\x31\x60\x11\x99\xb8\x5f\xbf\x86\xd9\x55\xa2\x6a\xbf\x39\x6f\x7e\x04\x00\x00\xff\xff\x8b\xb5\x45\xc3\x31\x08\x00\x00")

func schemasManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasManifestJson,
		"schemas/manifest.json",
	)
}

func schemasManifestJson() (*asset, error) {
	bytes, err := schemasManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/manifest.json", size: 2097, mode: os.FileMode(0644), modTime: time.Unix(1602763237, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0x4c, 0xc2, 0x11, 0x19, 0x5d, 0x61, 0xbb, 0x3e, 0x3a, 0x9d, 0xc5, 0x42, 0xb0, 0x16, 0x68, 0xfb, 0xfb, 0x7, 0x6d, 0x71, 0x6c, 0xfd, 0xe0, 0x36, 0x3a, 0x46, 0xcc, 0xe0, 0x94, 0xdd, 0xa1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/manifest.json": schemasManifestJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"manifest.json": &bintree{schemasManifestJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
