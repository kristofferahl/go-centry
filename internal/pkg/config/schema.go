// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/manifest.json (3.117kB)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4f\x8f\xd3\x3e\x10\xbd\xf7\x53\x58\xfe\xfd\x8e\xbb\x8d\xb8\xe6\xca\x09\x09\x09\xee\x68\x85\xdc\x64\x92\x78\x89\xc7\x66\xec\x94\xad\x50\xbe\x3b\xca\x1f\x68\xe2\x3f\x2d\x4b\xc8\x81\x53\xdb\x37\x33\xcf\x19\xcf\xbc\xd7\x7c\x3f\x30\xc6\xff\xb7\x45\x03\x4a\xf0\x9c\xf1\xc6\x39\x93\x67\xd9\xb3\xd5\xf8\x38\xa1\x47\x4d\x75\x36\x7d\xfd\x8f\x3f\x8c\xe9\xb2\xfc\x99\x6a\xf3\x2c\xab\xa5\x6b\xba\xd3\xb1\xd0\x2a\xfb\x42\xd2\x3a\x5d\x55\x40\xa2\x69\xb3\x5a\x3f\x16\x80\x8e\x2e\x73\xb9\xcd\x94\x40\x59\x81\x75\xc7\x81\x7f\x22\x73\x17\x03\x03\x9b\x3e\x3d\x43\xe1\x26\xcc\x90\x36\x40\x4e\x82\xe5\x39\x1b\x9e\x90\x31\x6e\x0b\x92\xc6\x5d\x81\x45\xa9\x20\x12\x97\xb1\x72\x84\xa5\x03\xb5\xcc\x5b\x64\x5a\x47\x12\x6b\x3e\x07\xfa\xf1\xb3\x9f\x0a\x79\xa1\x95\x12\x58\x6e\x3c\x61\xd1\xc6\x1c\x89\x34\x33\x47\x50\x28\xf0\xb0\xf0\x59\x1f\xd6\x51\x25\xf1\x3d\x60\xed\x1a\x9e\xb3\x37\x8b\x50\xbf\xcc\xe3\x46\x8c\x09\x3b\x30\x37\xd0\x9a\x7d\x98\x4b\x98\x46\x2c\x35\xee\x73\x80\x40\xd4\x4e\x0c\xfc\xfe\x24\xc2\xf9\xa5\xfb\x97\x65\x09\x37\x1e\xf0\xa4\x75\x0b\x02\x57\x04\x87\x08\x15\x27\xf8\xda\x49\x82\x41\x49\x9f\x82\xa5\x08\x87\xf9\x0b\x78\x8a\x2e\xaf\x36\x7e\x5f\x3b\xef\xee\x5c\xf3\xaa\x31\x01\x76\xca\x6b\x77\xc4\xa3\xd9\x6c\xba\xcb\x10\xb5\xd0\x7a\x13\xba\x5e\x0a\x0b\xe6\xb5\x9f\xc6\x6c\xa3\xc9\x6d\xa2\xf6\x63\xe2\xe5\x37\x8e\x05\x3c\x7f\xde\xaf\xa9\xdd\x45\x58\x42\x25\xba\x76\xdb\xbd\x25\xc9\x17\x9a\x7a\x85\x3c\xff\x41\x93\x18\x89\xc2\x3d\xbf\x63\x12\x85\xc6\x4a\xd6\x31\x8f\xf0\x94\x9f\xd2\x7d\x4c\x4d\xb7\x06\x97\x18\xdb\xb2\xc3\xf4\xc2\x6d\x24\x3e\x03\xd9\xbf\x4e\xda\xea\x3a\x45\x18\x98\xe7\x2d\xfb\x1c\xa8\xe0\x0c\x6d\x00\xdf\x13\x42\xda\x45\xc7\xbb\x3c\x75\x61\xc1\xe0\xf9\x58\xe9\x18\xfe\x4d\x10\xc6\x70\x20\xd2\x14\x0b\x18\x81\xb2\xe0\x1e\xfe\xb4\xfa\xdd\x7b\xca\x35\x04\x95\x7c\xf9\x93\x46\x53\x9a\x5f\x8a\x25\x25\x1c\xc0\xb3\x24\x8d\x0a\xd0\x7d\xa4\xf0\xfc\x8d\x6b\xd0\xc8\x12\xde\xa1\x03\x42\xd1\xbe\x0d\x5f\x1b\xd9\x4d\xad\xa7\x88\x3e\x04\x7f\xe1\x77\x78\x0e\x1e\x5f\xdc\x2d\x56\xce\x30\x8d\x6a\xa8\x1c\xab\xc2\x8a\xeb\x5b\xf0\xda\x33\x0e\x43\x6d\xff\x23\x00\x00\xff\xff\xcb\x50\x59\x26\x2d\x0c\x00\x00")

func schemasManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasManifestJson,
		"schemas/manifest.json",
	)
}

func schemasManifestJson() (*asset, error) {
	bytes, err := schemasManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/manifest.json", size: 3117, mode: os.FileMode(0644), modTime: time.Unix(1631354909, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf2, 0x7a, 0x26, 0x93, 0x2d, 0x15, 0x77, 0xf5, 0xd6, 0x3d, 0x84, 0x46, 0xf4, 0x75, 0xd5, 0xc0, 0x8d, 0x42, 0x65, 0x82, 0x73, 0x46, 0xce, 0xf8, 0x75, 0xa0, 0xe8, 0x13, 0xb4, 0xd0, 0xe3, 0x49}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/manifest.json": schemasManifestJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": {nil, map[string]*bintree{
		"manifest.json": {schemasManifestJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
