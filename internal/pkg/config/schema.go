// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/manifest.json (3.05kB)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x8f\xd3\x30\x10\xbd\xf7\x57\x58\x86\xe3\x6e\x23\xae\xbd\x72\x42\x42\x82\x3b\x5a\x21\x37\x99\x24\x5e\xe2\x19\x33\x76\xcb\x56\x28\xff\x1d\xe5\x03\x9a\xd8\x4e\x0b\x84\x1c\x38\xb5\x7d\x33\xf3\xec\xf9\x78\x53\x7f\xdf\x09\x21\x5f\xbb\xbc\x06\xa3\xe4\x41\xc8\xda\x7b\x7b\xc8\xb2\x67\x47\xf8\x38\xa0\x7b\xe2\x2a\x1b\xbe\xbe\x92\x0f\xbd\xbb\x2e\x7e\xba\xba\x43\x96\x55\xda\xd7\xa7\xe3\x3e\x27\x93\x7d\x61\xed\x3c\x95\x25\xb0\xaa\x9b\xac\xa2\xc7\x1c\xd0\xf3\x65\x0c\x77\x99\x51\xa8\x4b\x70\x7e\xdf\xf1\x0f\x64\xfe\x62\xa1\x63\xa3\xe3\x33\xe4\x7e\xc0\x2c\x93\x05\xf6\x1a\x9c\x3c\x88\xee\x86\x42\x48\x97\xb3\xb6\xfe\x0a\x4c\x42\x15\xb3\xba\xf4\x91\x3d\xac\x3d\x98\xa9\xdf\xc4\xd3\x79\xd6\x58\xc9\xd1\xd0\xf6\x9f\xed\x10\x28\x73\x32\x46\x61\xb1\xf2\x84\x49\x1a\xa3\x25\x91\xcc\x68\x41\x65\x20\xc0\xe2\xbb\x3e\xcc\xad\x46\xe3\x7b\xc0\xca\xd7\xf2\x20\xde\x4c\x4c\xed\xd4\x4f\x5a\xd5\x3b\x6c\xc0\x5c\x43\x63\xb7\x61\x2e\x60\x68\xb1\x26\xdc\xe6\x00\x85\x48\x5e\x75\xfc\x61\x27\xe2\xfe\x2d\xe7\xaf\x8b\x02\x6e\x5c\xf0\x48\xd4\x80\xc2\x19\xc1\x2e\x41\x25\x19\xbe\x9e\x34\x43\xa7\xa4\x4f\xd1\x50\xc4\xcd\xfc\x05\x3c\x25\x87\x97\x6c\x98\xd7\xc6\xb3\x3b\xc6\xfc\x51\x9b\x00\x4f\x26\x48\xb7\xc7\x93\xde\x62\xa8\x65\x8c\x3a\x68\x82\x0e\x5d\x8b\x22\xa2\x7e\x6d\xa7\x31\x57\x13\xfb\x55\xd4\xa1\x4d\xbd\xfc\xc6\xb1\x80\xe7\xcf\xdb\x25\xb5\xb9\x08\x0b\x28\xd5\xa9\x59\x57\xb7\xff\x5c\xe1\x3d\x51\x3c\xa4\x77\x14\x9e\x13\x96\xba\x4a\x09\x3c\x90\xed\x92\x68\x53\x52\xb8\x55\xf5\x85\x9a\x4f\x33\x5c\x9e\x96\x95\xc4\x67\x60\xf7\xcf\x49\x1b\xaa\x96\x08\xa3\xcd\x77\x6b\xf7\x75\x54\x70\x86\x26\x82\xef\x4d\xf1\xf2\x0a\xec\x6b\x79\x3c\xc5\x01\xdd\xc2\xc6\x92\x52\xf8\x37\xc5\x98\xc2\x81\x99\x38\x65\xb0\x0a\x75\x2e\x03\xfc\x69\xf6\xbb\x0d\x64\x67\x19\x4a\xfd\xf2\x37\x89\x2e\x09\x76\x2a\x96\x25\xe1\x00\x9e\x35\x13\x1a\x40\xff\x91\xe3\xf3\x57\x8e\x41\xad\x0b\x78\x87\x1e\x18\x55\xf3\x36\x7e\xf3\x89\x9b\x5a\x5f\x22\xfa\x10\xfd\xff\xde\xe1\xd9\x05\x7c\xe9\x6d\x31\xdb\x0c\x43\xab\xba\xc8\x3e\x2a\x8e\xb8\x3e\x61\xe7\x3b\x63\xd7\xc5\xb6\x3f\x02\x00\x00\xff\xff\x54\xe0\x8b\x0e\xea\x0b\x00\x00")

func schemasManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasManifestJson,
		"schemas/manifest.json",
	)
}

func schemasManifestJson() (*asset, error) {
	bytes, err := schemasManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/manifest.json", size: 3050, mode: os.FileMode(0644), modTime: time.Unix(1613832835, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0xe3, 0xa4, 0x36, 0x85, 0x2d, 0x68, 0x92, 0x99, 0xad, 0xb3, 0x53, 0xbd, 0xe6, 0x51, 0x6c, 0xee, 0xb9, 0x64, 0x9c, 0x10, 0x6, 0x5, 0x14, 0x93, 0xd5, 0xbb, 0xa3, 0xac, 0x11, 0x14, 0x7d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/manifest.json": schemasManifestJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": {nil, map[string]*bintree{
		"manifest.json": {schemasManifestJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
