// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/manifest.json (1.902kB)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x95\x5d\x92\xd3\x30\x0c\xc7\xdf\x73\x0a\x8f\xe1\x31\xdb\x0c\xaf\x39\x03\x37\x60\x3a\x8c\xeb\x28\x89\x97\x58\x0a\xb2\x53\xb6\xb3\xd3\xbb\x33\x76\xdc\x62\xb2\x0d\x94\x74\xd8\x27\xb7\xb2\x7e\xb2\x3e\xfe\x6a\x5f\x0b\x21\xe4\x47\xa7\x7b\xb0\x4a\xd6\x42\xf6\xde\x8f\x75\x55\x3d\x3b\xc2\xa7\xd9\xba\x23\xee\xaa\xf9\xe3\x07\x59\x46\x77\xd3\x5c\x5c\x5d\x5d\x55\x9d\xf1\xfd\x74\xd8\x69\xb2\xd5\x37\x36\xce\x53\xdb\x02\xab\x7e\xa8\x3a\x7a\xd2\x80\x9e\x4f\x09\x77\x95\x55\x68\x5a\x70\x7e\x17\xe2\xcb\xb2\x08\xd1\xfc\x69\x84\x10\x8e\x0e\xcf\xa0\xfd\xfc\xc2\xc8\x34\x02\x7b\x03\x4e\xd6\x22\xa4\x28\x84\x74\x9a\xcd\xe8\x7f\x19\x32\x54\x31\xab\x53\x24\xa3\xd9\x78\xb0\xb9\x5f\xe6\xe9\x3c\x1b\xec\x64\xba\x38\xc7\xf3\x3c\x83\x52\x93\xb5\x0a\x9b\x07\x5f\xc8\xca\x48\x37\x37\x8a\x49\x37\xa8\x6c\x60\x5e\xdf\xe4\x57\x0a\x69\x0d\x7e\x06\xec\x7c\x2f\x6b\xf1\xe9\x92\xe3\x25\xa2\x8a\xe6\x7f\xe6\x7a\x18\xc6\x2d\x5c\x03\x73\xf3\x0d\xe1\x16\x5c\x21\x92\x57\x81\x76\xbf\xe3\xa9\x57\x69\x0e\xd9\x2c\x22\xc6\xf0\x7d\x32\x0c\x41\x6b\x5f\x52\xaf\xca\x54\xbb\xd8\xdf\x9c\x20\x8d\xd7\x47\xde\x67\x80\x89\xb9\xd9\x11\xc0\xc9\x86\xd4\x33\xd3\x81\x68\x08\xa7\x83\x21\x3c\xb1\x5f\xf4\x69\xab\x1c\x5c\x4f\xec\xef\x02\xc3\x77\xf5\xb2\x1a\x08\xf0\xf8\x75\x6b\x12\x0f\x6a\xa4\x81\x56\x4d\xc3\x7d\x55\xfc\x0f\x79\x45\xa6\x4c\x33\x58\x91\x97\x26\x6c\x4d\x77\x4b\x5d\x0b\xcd\xac\x29\x66\xdb\x84\x1f\x6a\xad\x3c\x02\xbb\x4d\xe0\x40\xdd\x8a\xdc\xdf\xae\xc8\x9f\x96\x24\x84\x82\x23\x0c\x7f\xdd\x93\x06\x0e\x53\xb4\x18\x6c\x29\x9c\x3f\x14\x63\xf4\x60\x26\x9e\x77\x1f\x8d\x5e\xae\x4d\x7c\x1b\x5a\xf3\x72\x67\x89\x19\x9a\x09\xa3\x58\x08\x64\xe5\xd7\xe7\xd2\xcd\xa4\x90\x80\x45\x64\xe1\x7e\xfd\x2b\x29\xaf\xaa\x11\xfb\xe2\x5c\xfc\x0c\x00\x00\xff\xff\xb3\x48\x6d\x8e\x6e\x07\x00\x00")

func schemasManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasManifestJson,
		"schemas/manifest.json",
	)
}

func schemasManifestJson() (*asset, error) {
	bytes, err := schemasManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/manifest.json", size: 1902, mode: os.FileMode(0644), modTime: time.Unix(1586454269, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x91, 0x57, 0x15, 0x23, 0x1b, 0x55, 0x70, 0x27, 0x3, 0xfc, 0xf7, 0xa2, 0xc4, 0x2d, 0x9, 0x58, 0x71, 0xea, 0x44, 0x6b, 0xef, 0x15, 0xa, 0xf3, 0x2b, 0x9e, 0x5c, 0x2d, 0x9e, 0x51, 0x6c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/manifest.json": schemasManifestJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"manifest.json": &bintree{schemasManifestJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
