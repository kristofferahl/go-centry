// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/manifest.json (3.79kB)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4d\x8f\x9b\x3c\x10\xbe\xf3\x2b\x90\xdf\xf7\xb8\x1b\xd4\x1e\x73\xed\xa9\x52\xa5\xf6\x5e\x45\x95\x03\x03\x78\x0b\x63\x3a\x36\x74\xa3\x2a\xff\xbd\xc2\xb8\x5d\xf0\x07\xc9\x96\x72\xe8\x29\xd1\x7c\x3c\xf6\xe3\x99\x79\x6c\x7e\x24\x69\xca\xfe\x57\x79\x0d\x2d\x67\xc7\x94\xd5\x5a\x77\xc7\x2c\x7b\x52\x12\x1f\x27\xeb\x41\x52\x95\x4d\x7f\xff\x63\x0f\x26\x5c\x14\xbf\x42\xd5\x31\xcb\x2a\xa1\xeb\xfe\x7c\xc8\x65\x9b\x7d\x25\xa1\xb4\x2c\x4b\x20\x5e\x37\x59\x25\x1f\x73\x40\x4d\x17\x9b\xae\xb2\x96\xa3\x28\x41\xe9\xc3\x88\x3f\x81\xe9\x4b\x07\x23\x9a\x3c\x3f\x41\xae\x27\x5b\x47\xb2\x03\xd2\x02\x14\x3b\xa6\xe3\x0e\xd3\x94\xa9\x9c\x44\xa7\x5f\x0c\xb3\x54\x4e\xc4\x2f\x26\xd3\x98\x85\x86\x76\x1e\x37\x8b\x54\x9a\x04\x56\xcc\x3a\xae\xe6\xf7\x3a\x25\xb2\x5c\xb6\x2d\xc7\x62\xe3\x0a\x33\x1a\xd6\x13\x20\x63\x3d\xc8\x5b\x70\x6c\xfe\x5e\x1f\x96\xde\x56\xe0\x07\xc0\x4a\xd7\xec\x98\xbe\x99\xb9\xae\xf3\x38\xd6\x71\x13\xb0\x03\x72\x0d\x4d\xb7\x0f\x72\x01\x53\x89\x85\xc4\x7d\x16\xe0\x88\x52\xf3\x11\xdf\xad\x84\x5f\xbf\x38\x7f\x51\x14\xb0\xb2\xc1\xb3\x94\x0d\x70\x5c\x00\x24\x01\x28\x46\xf0\xad\x17\x04\xe3\x24\x7d\xf6\x9a\xc2\x2f\xe6\x6f\xc3\x29\xd8\xbc\xb2\x73\x79\xed\xdc\xbb\x36\xe7\x55\x65\x02\xec\x5b\x87\xae\xb1\x07\xa3\xd3\xe9\x2c\x7d\xab\x40\x0d\x15\x90\xef\x50\xd0\x2c\xb7\xbf\xb0\x67\xc3\x5b\xb6\xf0\x9c\xa2\x35\xde\x6f\x2e\x55\x2d\x49\x6f\x82\x76\x7d\xfc\xf9\x8e\x65\x01\x87\x2f\xfb\x91\xda\x7d\x70\x07\xde\xf4\x5e\x07\x46\x3b\xdc\x3a\xfd\x3e\x77\xb2\xbc\x6e\xb7\xfe\x68\xcf\x5b\x7f\xf0\x20\xef\x61\x7b\x83\x73\x80\xb9\xcd\x08\x77\xcd\xae\x4b\x9a\x23\xdf\x71\xc9\xe4\xc6\x16\x62\xf2\x68\xbd\xa6\x06\x8e\xf9\xe4\x61\xc4\xf7\x70\x5d\x69\xe6\x92\xf7\xcd\xb6\x19\x8d\x82\xcf\x48\xbd\xe2\xfa\xf8\x07\x2f\x31\x03\xe4\x6b\xea\x8d\x4b\x2c\x97\x58\x8a\x2a\x74\x87\x39\xb3\x1a\x9b\xd1\xd0\x6c\xae\x15\x2e\x52\xb6\x39\xc3\xb8\xb8\x6d\x04\x1e\x80\xd4\x5f\x07\x6d\x64\x15\x03\x0c\xc8\xdd\x9a\xd4\xb1\x06\x06\x68\xd6\xf4\x33\x76\x6b\x47\x6e\x79\x73\x96\xe7\x3e\x24\x17\x4c\x60\x29\x43\xf6\xef\x9c\x30\x64\x07\x22\xe9\x3f\x00\xcc\x53\x09\x45\xee\x09\xc3\x72\xf4\x9d\xc9\xed\x08\x4a\xf1\xfc\x27\x44\xef\x94\x97\x60\xa1\x00\x07\x41\x12\x5b\x40\xfd\x89\xfc\xf5\x37\xb6\x41\x2d\x0a\x78\x8f\x1a\x08\x79\xf3\xce\xff\xac\x49\x57\x67\x3d\x06\xf4\xd1\x7b\x62\xde\xc0\x49\x1c\xbc\xb0\x5a\x2c\x94\x61\x2a\xd5\x98\x69\xb2\xfc\x8c\x97\xaf\xb4\xa5\x66\x24\x63\xee\x35\xf9\x19\x00\x00\xff\xff\x40\x97\x71\x82\xce\x0e\x00\x00")

func schemasManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasManifestJson,
		"schemas/manifest.json",
	)
}

func schemasManifestJson() (*asset, error) {
	bytes, err := schemasManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/manifest.json", size: 3790, mode: os.FileMode(0644), modTime: time.Unix(1682081530, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbd, 0xd7, 0x39, 0x73, 0x8d, 0x58, 0xd5, 0xc, 0xa, 0x38, 0x2d, 0x18, 0x89, 0x32, 0xca, 0xce, 0x2c, 0x6f, 0x79, 0x57, 0xb9, 0x7, 0x29, 0xde, 0x44, 0xd4, 0x1c, 0x91, 0xfa, 0x61, 0xcd, 0xf5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/manifest.json": schemasManifestJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": {nil, map[string]*bintree{
		"manifest.json": {schemasManifestJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
